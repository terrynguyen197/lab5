#include <iostream>
#include <cstring>

class Country
{
    int key;
    char* name;
    long population;

public:
    Country(int key, const char* name, long population)
    {
        this->key = key;
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
        this->population = population;
    }

    int getKey()
    {
        return key;
    }

    void updatePopulation(long newPopulation)
    {
        population = newPopulation;
    }

    void print()
    {
        std::cout << "Country key: " << key << ", Name: " << name << ", Population: " << population << std::endl;
    }

};

struct Node
{
    Country* ptr;
    Node* next;
};

struct Node* head = nullptr;

void addCountry(int key, const char* name, long population)
{
    Node* temp = head;
    while (temp != nullptr)
    {
        if (temp->ptr->getKey() == key)
        {
            temp->ptr->print();
            std::cout << "Population updated to " << population << std::endl;
            temp->ptr->updatePopulation(population);
            return;
        }
        temp = temp->next;
    }

    Country* new_country = new Country(key, name, population);
    Node* new_node = new Node{new_country, nullptr};
    if (head == nullptr)
    {
        head = new_node;
    }
    else
    {
        new_node->next = head;
        head = new_node;
    }
}

void print()
{
    Node* temp = head;
    while (temp != nullptr)
    {
        temp->ptr->print();
        temp = temp->next;
    }
}

int main()
{
    print();


    addCountry(1, "USA", 328200000);
    addCountry(2, "China", 1393000000);
    addCountry(3, "Japan", 126500000);
    addCountry(1, "Update USA", 330000000);
    addCountry(2, "Update China", 1443000000);
    addCountry(3, "Update Japan", 130500000);

    print();

    return 0;
}

from this code 
Add a new method in the Country class: 

long & refPopulation(); //returns reference to the country population  
Use only this method to refer to/update the population.
 
Extend also Task 1 with two new functions (updateCountry and removeCountry): 

The updateCountry function searches the list for a Country with a given key. If the Countrye with the given key exists the name is updated if is not equal.  

If there is no Country with the given key,  the function creates a new node, the country, and inserts it to the list. The default population is set to 0.  

In all cases the updateCountry function returns the reference to the population. 

int & updateCountry(int key, const char* name); 

 //remove Country of a given key from the list 
          //i.e. (delete the Country object and the corresponding Node)  
     void removeCountry(int key); 
Extend the main() with tests of the updateCountry() and removeCountry() functions.  

All the tests from Task1 should be running as well! In tests, use different sequences of the functions from Task1 and Task2. 

Necessary: In main () show that using updateCountry()  the internal data of the Country can be changed.  
